{"filter":false,"title":"helpers.py","tooltip":"~/workspace/2019/speller/similarities/similarities/helpers.py","undoManager":{"mark":24,"position":24,"stack":[[{"start":{"row":50,"column":0},"end":{"row":50,"column":1},"action":"insert","lines":["#"],"id":2}],[{"start":{"row":50,"column":1},"end":{"row":50,"column":2},"action":"insert","lines":["s"],"id":3},{"start":{"row":50,"column":2},"end":{"row":50,"column":3},"action":"insert","lines":["u"]},{"start":{"row":50,"column":3},"end":{"row":50,"column":4},"action":"insert","lines":["b"]},{"start":{"row":50,"column":4},"end":{"row":50,"column":5},"action":"insert","lines":["s"]},{"start":{"row":50,"column":5},"end":{"row":50,"column":6},"action":"insert","lines":["t"]},{"start":{"row":50,"column":6},"end":{"row":50,"column":7},"action":"insert","lines":["r"]},{"start":{"row":50,"column":7},"end":{"row":50,"column":8},"action":"insert","lines":["i"]}],[{"start":{"row":50,"column":8},"end":{"row":50,"column":9},"action":"insert","lines":["n"],"id":4},{"start":{"row":50,"column":9},"end":{"row":50,"column":10},"action":"insert","lines":["g"]}],[{"start":{"row":50,"column":10},"end":{"row":50,"column":11},"action":"insert","lines":[" "],"id":5},{"start":{"row":50,"column":11},"end":{"row":50,"column":12},"action":"insert","lines":["f"]},{"start":{"row":50,"column":12},"end":{"row":50,"column":13},"action":"insert","lines":["u"]},{"start":{"row":50,"column":13},"end":{"row":50,"column":14},"action":"insert","lines":["n"]},{"start":{"row":50,"column":14},"end":{"row":50,"column":15},"action":"insert","lines":["c"]},{"start":{"row":50,"column":15},"end":{"row":50,"column":16},"action":"insert","lines":["t"]}],[{"start":{"row":50,"column":16},"end":{"row":50,"column":17},"action":"insert","lines":["i"],"id":6},{"start":{"row":50,"column":17},"end":{"row":50,"column":18},"action":"insert","lines":["o"]},{"start":{"row":50,"column":18},"end":{"row":50,"column":19},"action":"insert","lines":["n"]}],[{"start":{"row":31,"column":0},"end":{"row":31,"column":1},"action":"insert","lines":["#"],"id":7},{"start":{"row":31,"column":1},"end":{"row":31,"column":2},"action":"insert","lines":["s"]},{"start":{"row":31,"column":2},"end":{"row":31,"column":3},"action":"insert","lines":["e"]},{"start":{"row":31,"column":3},"end":{"row":31,"column":4},"action":"insert","lines":["n"]},{"start":{"row":31,"column":4},"end":{"row":31,"column":5},"action":"insert","lines":["t"]},{"start":{"row":31,"column":5},"end":{"row":31,"column":6},"action":"insert","lines":["e"]}],[{"start":{"row":31,"column":6},"end":{"row":31,"column":7},"action":"insert","lines":["n"],"id":8},{"start":{"row":31,"column":7},"end":{"row":31,"column":8},"action":"insert","lines":["c"]},{"start":{"row":31,"column":8},"end":{"row":31,"column":9},"action":"insert","lines":["e"]},{"start":{"row":31,"column":9},"end":{"row":31,"column":10},"action":"insert","lines":["s"]}],[{"start":{"row":31,"column":10},"end":{"row":31,"column":11},"action":"insert","lines":[" "],"id":9},{"start":{"row":31,"column":11},"end":{"row":31,"column":12},"action":"insert","lines":["f"]},{"start":{"row":31,"column":12},"end":{"row":31,"column":13},"action":"insert","lines":["u"]},{"start":{"row":31,"column":13},"end":{"row":31,"column":14},"action":"insert","lines":["n"]}],[{"start":{"row":31,"column":14},"end":{"row":31,"column":15},"action":"insert","lines":["c"],"id":10},{"start":{"row":31,"column":15},"end":{"row":31,"column":16},"action":"insert","lines":["t"]},{"start":{"row":31,"column":16},"end":{"row":31,"column":17},"action":"insert","lines":["i"]},{"start":{"row":31,"column":17},"end":{"row":31,"column":18},"action":"insert","lines":["o"]},{"start":{"row":31,"column":18},"end":{"row":31,"column":19},"action":"insert","lines":["n"]}],[{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":11},{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"insert","lines":["#"]}],[{"start":{"row":12,"column":1},"end":{"row":12,"column":2},"action":"insert","lines":["l"],"id":12},{"start":{"row":12,"column":2},"end":{"row":12,"column":3},"action":"insert","lines":["i"]},{"start":{"row":12,"column":3},"end":{"row":12,"column":4},"action":"insert","lines":["n"]},{"start":{"row":12,"column":4},"end":{"row":12,"column":5},"action":"insert","lines":["e"]},{"start":{"row":12,"column":5},"end":{"row":12,"column":6},"action":"insert","lines":["s"]}],[{"start":{"row":12,"column":6},"end":{"row":12,"column":7},"action":"insert","lines":[" "],"id":13},{"start":{"row":12,"column":7},"end":{"row":12,"column":8},"action":"insert","lines":["f"]},{"start":{"row":12,"column":8},"end":{"row":12,"column":9},"action":"insert","lines":["u"]},{"start":{"row":12,"column":9},"end":{"row":12,"column":10},"action":"insert","lines":["n"]},{"start":{"row":12,"column":10},"end":{"row":12,"column":11},"action":"insert","lines":["c"]}],[{"start":{"row":12,"column":11},"end":{"row":12,"column":12},"action":"insert","lines":["t"],"id":14},{"start":{"row":12,"column":12},"end":{"row":12,"column":13},"action":"insert","lines":["i"]},{"start":{"row":12,"column":13},"end":{"row":12,"column":14},"action":"insert","lines":["o"]},{"start":{"row":12,"column":14},"end":{"row":12,"column":15},"action":"insert","lines":["n"]}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":15},{"start":{"row":2,"column":0},"end":{"row":2,"column":1},"action":"insert","lines":["#"]}],[{"start":{"row":2,"column":1},"end":{"row":2,"column":2},"action":"insert","lines":["s"],"id":16},{"start":{"row":2,"column":2},"end":{"row":2,"column":3},"action":"insert","lines":["u"]},{"start":{"row":2,"column":3},"end":{"row":2,"column":4},"action":"insert","lines":["b"]},{"start":{"row":2,"column":4},"end":{"row":2,"column":5},"action":"insert","lines":["s"]},{"start":{"row":2,"column":5},"end":{"row":2,"column":6},"action":"insert","lines":["t"]},{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":["r"]},{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["i"]}],[{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["n"],"id":17},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["g"]}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":[" "],"id":18}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"remove","lines":[" "],"id":19}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":["_"],"id":20},{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":["l"]},{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"insert","lines":["i"]},{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"insert","lines":["s"]},{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":["t"]}],[{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"insert","lines":[" "],"id":21},{"start":{"row":2,"column":16},"end":{"row":2,"column":17},"action":"insert","lines":["f"]},{"start":{"row":2,"column":17},"end":{"row":2,"column":18},"action":"insert","lines":["u"]},{"start":{"row":2,"column":18},"end":{"row":2,"column":19},"action":"insert","lines":["n"]},{"start":{"row":2,"column":19},"end":{"row":2,"column":20},"action":"insert","lines":["c"]},{"start":{"row":2,"column":20},"end":{"row":2,"column":21},"action":"insert","lines":["t"]}],[{"start":{"row":2,"column":21},"end":{"row":2,"column":22},"action":"insert","lines":["i"],"id":22},{"start":{"row":2,"column":22},"end":{"row":2,"column":23},"action":"insert","lines":["o"]},{"start":{"row":2,"column":23},"end":{"row":2,"column":24},"action":"insert","lines":["n"]}],[{"start":{"row":0,"column":0},"end":{"row":62,"column":0},"action":"remove","lines":["from nltk.tokenize import sent_tokenize","","#substring_list function","def substring_list(n, s):","    \"\"\"Return a list in of substrings of length n from original string s\"\"\"","    ret_list = list()","","    for i in range(0, len(s)-n):","        temp = s[i:i+n]","        ret_list.append(temp)","","    return ret_list","","#lines function","def lines(a, b):","    \"\"\"Return lines in both a and b\"\"\"","","    # TODO","    # Take in string inputs A, B","    # Split the lines into lists","    asplit = a.splitlines()","    bsplit = b.splitlines()","    simlist = list()","","    # Iterate through all elements.","    for x in range(len(bsplit)):","        # Compare them","        if asplit[x] == bsplit[x]:","            # And add to a new list if they are the same","            if simlist.count(bsplit[x]) == 0:","                simlist.append(bsplit[x])","    return simlist","","#sentences function","def sentences(a, b):","    \"\"\"Return sentences in both a and b\"\"\"","","    asplit = sent_tokenize(a)","    bsplit = sent_tokenize(b)","    simlist = set(asplit) & set(bsplit)","","","","    # # Iterate through all elements.","    # for x in range(len(bsplit)):","    #     # Compare them","    #     if (len(asplit) < len(bsplit)) and (asplit[x] == bsplit[x]):","    #         # And add to a new list if they are the same","    #         if simlist.count(bsplit[x]) == 0:","    #             simlist.append(bsplit[x])","    return simlist","","#substring function","def substrings(a, b, n):","    \"\"\"Return substrings of length n in both a and b\"\"\"","    asplit = substring_list(n, a)","    bsplit = substring_list(n, b)","    simlist = set(asplit) & set(bsplit)","","    return simlist","","",""],"id":23}],[{"start":{"row":0,"column":0},"end":{"row":69,"column":0},"action":"insert","lines":["","","# helpers.py file","from nltk.tokenize import sent_tokenize","","# substring_list function","","","def substring_list(n, s):","    \"\"\"Return a list in of substrings of length n from original string s\"\"\"","    ret_list = list()","","    for i in range(0, len(s)-n):","        temp = s[i:i+n]","        ret_list.append(temp)","","    return ret_list","","# lines function","","","def lines(a, b):","    \"\"\"Return lines in both a and b\"\"\"","","    # TODO","    # Take in string inputs A, B","    # Split the lines into lists","    asplit = a.splitlines()","    bsplit = b.splitlines()","    simlist = list()","","    # Iterate through all elements.","    for x in range(len(bsplit)):","        # Compare them","        if asplit[x] == bsplit[x]:","            # And add to a new list if they are the same","            if simlist.count(bsplit[x]) == 0:","                simlist.append(bsplit[x])","    return simlist","","# sentences function","","","def sentences(a, b):","    \"\"\"Return sentences in both a and b\"\"\"","","    asplit = sent_tokenize(a)","    bsplit = sent_tokenize(b)","    simlist = set(asplit) & set(bsplit)","","    # # Iterate through all elements.","    # for x in range(len(bsplit)):","    #     # Compare them","    #     if (len(asplit) < len(bsplit)) and (asplit[x] == bsplit[x]):","    #         # And add to a new list if they are the same","    #         if simlist.count(bsplit[x]) == 0:","    #             simlist.append(bsplit[x])","    return simlist","","# substring function","","","def substrings(a, b, n):","    \"\"\"Return substrings of length n in both a and b\"\"\"","    asplit = substring_list(n, a)","    bsplit = substring_list(n, b)","    simlist = set(asplit) & set(bsplit)","","    return simlist",""],"id":24}],[{"start":{"row":0,"column":0},"end":{"row":69,"column":0},"action":"remove","lines":["","","# helpers.py file","from nltk.tokenize import sent_tokenize","","# substring_list function","","","def substring_list(n, s):","    \"\"\"Return a list in of substrings of length n from original string s\"\"\"","    ret_list = list()","","    for i in range(0, len(s)-n):","        temp = s[i:i+n]","        ret_list.append(temp)","","    return ret_list","","# lines function","","","def lines(a, b):","    \"\"\"Return lines in both a and b\"\"\"","","    # TODO","    # Take in string inputs A, B","    # Split the lines into lists","    asplit = a.splitlines()","    bsplit = b.splitlines()","    simlist = list()","","    # Iterate through all elements.","    for x in range(len(bsplit)):","        # Compare them","        if asplit[x] == bsplit[x]:","            # And add to a new list if they are the same","            if simlist.count(bsplit[x]) == 0:","                simlist.append(bsplit[x])","    return simlist","","# sentences function","","","def sentences(a, b):","    \"\"\"Return sentences in both a and b\"\"\"","","    asplit = sent_tokenize(a)","    bsplit = sent_tokenize(b)","    simlist = set(asplit) & set(bsplit)","","    # # Iterate through all elements.","    # for x in range(len(bsplit)):","    #     # Compare them","    #     if (len(asplit) < len(bsplit)) and (asplit[x] == bsplit[x]):","    #         # And add to a new list if they are the same","    #         if simlist.count(bsplit[x]) == 0:","    #             simlist.append(bsplit[x])","    return simlist","","# substring function","","","def substrings(a, b, n):","    \"\"\"Return substrings of length n in both a and b\"\"\"","    asplit = substring_list(n, a)","    bsplit = substring_list(n, b)","    simlist = set(asplit) & set(bsplit)","","    return simlist",""],"id":25}],[{"start":{"row":0,"column":0},"end":{"row":71,"column":24},"action":"insert","lines":["from nltk.tokenize import sent_tokenize","","","def lines(a, b):","    \"\"\"Return lines in both a and b\"\"\"","","    # Compares lines","    lines1 = a.splitlines()","    lines2 = b.splitlines()","","    str_common = []","","    for line in lines1:","        if line in str_common:","            continue","        if line in lines2:","            str_common.append(line)","","    print(\"This is str_common now:{}\".format(str_common))","","    return str_common","","","def sentences(a, b):","    \"\"\"Return sentences in both a and b\"\"\"","","    # Compares sentences","    sent1 = sent_tokenize(a)","    sent2 = sent_tokenize(b)","","    sent_common = []","","    for sentence in sent1:","        if sentence in sent_common:","            continue","        if sentence in sent2:","            sent_common.append(sentence)","","    return sent_common","","","def substrings(a, b, n):","    \"\"\"Return substrings of length n in both a and b\"\"\"","","    # Compare substrings","    def extract_substrings(string, x):","        substring = []","        y = 0","","        for i in string:","            if len(string[y:y + int(x)]) < x:","                break","            if string[y:y + int(x)] in substring:","                y += 1","                continue","            else:","                substring.append(string[y:y + int(x)])","                y += 1","","        return substring","","    substr1 = extract_substrings(a, n)","    substr2 = extract_substrings(b, n)","    substr_common = []","","    for substring in substr1:","        if substring in substr_common:","            continue","        if substring in substr2:","            substr_common.append(substring)","","    return substr_common"],"id":26}]]},"ace":{"folds":[],"scrolltop":685.125,"scrollleft":0,"selection":{"start":{"row":71,"column":24},"end":{"row":71,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1556669637989,"hash":"17f038f924fd8b52de344e22a6b34a5cae47ebea"}